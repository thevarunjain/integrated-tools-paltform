package com.IntegratedTools.JIRA.JavaApiClient;

import java.net.URL;
import java.net.HttpURLConnection;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.json.simple.*;
import org.json.simple.parser.*;
import java.util.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.text.SimpleDateFormat;

public class JavaApiClient {

    public static void main(String[] args){

        String loginResponse = "";
        String jSessionID = "";
        String jsonData = "";
        String csvData = "";
        String writeToFileOutput = "";
        // Change the baseURL to your own jira server's address and port number
        // Note: adding "rest/" at the end may not be necessary in your
        //       environment
        String baseURL = "http://54.153.16.204:8080/jira/rest/";
        String loginURL = "auth/1/session";
        String biExportURL = "getbusinessintelligenceexport/1.0/message";
        // The analysisStartData and analysisEndDate specify an inclusive
        // period over time over which you want to extract issues that
        // have been either added or updated.
        String analysisStartDate = "01-DEC-18";
        String analysisEndDate = "31-DEC-18";
        // The loginUserName and loginPassWord are the credentials for a user
        // who has permission to view the issues that you wish to export.
        String loginUserName = "abhijira911";
        String loginPassWord = "Tomandjerry1$";
        boolean errorsOccurred = false;
        String exportDirectory = "./downloads/";

        if(!errorsOccurred)
        {
            loginResponse = loginToJira(baseURL, loginURL, loginUserName, loginPassWord);
            if(loginResponse == "ERROR") { errorsOccurred = true; }
        }
        if(!errorsOccurred)
        {
            jSessionID = parseJSessionID(loginResponse);
            if(jSessionID == "ERROR") { errorsOccurred = true; }
        }
        if(!errorsOccurred)
        {
            jsonData = getJsonData(baseURL, biExportURL, jSessionID, analysisStartDate, analysisEndDate);
            if(jsonData == "ERROR") { errorsOccurred = true; }
        }
        if(!errorsOccurred)
        {
            csvData = formatAsCSV(jsonData);
            if(csvData == "ERROR") { errorsOccurred = true; }
        }
        if(!errorsOccurred)
        {
            writeToFileOutput = writeToFile(csvData, exportDirectory);
            if(writeToFileOutput == "ERROR") { errorsOccurred = true; }
        }
        if(!errorsOccurred)
        {
            System.out.println("SUCCESS");
        } else {
            System.out.println("FAILURE");
        }
    }


    /**
     * This method takes the user's credentials and uses them to make a request
     * to log into a given Jira instance.  It returns the response generated from
     * that request.
     *
     * @param baseURL The protocol, server name, and port number on which Jira is
     * running suffixed with "/jira/" or /jira/rest/"
     * (e.g., http://company.loc:2990/jira/rest/)
     * @param loginURL The standard path to the login API for a Jira server which
     * will be suffixed to the baseURL (e.g., auth/1/session)
     * @param loginUserName The username of a user who has permissions to view the
     * issues which we would like to export out of Jira.
     * @param loginPassWord The password associated with the user named in
     * loginUserName.
     *
     * @return loginResponse The response generated by Jira and returned when this
     * method submits its login request.
     */
    public static String loginToJira(String baseURL, String loginURL, String loginUserName, String loginPassWord){
        String loginResponse = "";
        URL url = null;
        HttpURLConnection conn = null;
        String input = "";
        OutputStream os = null;
        BufferedReader br = null;
        String output = null;

        try {
            // Create URL object
            url = new URL(baseURL + loginURL);
            // Use the URL to create connection
            conn = (HttpURLConnection) url.openConnection();

            // Set properties
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");

            // Create JSON post data
            input = "{\"username\":\"" + loginUserName + "\", \"password\":\"" + loginPassWord + "\"}";

            // Send our request
            os = conn.getOutputStream();
            os.write(input.getBytes());
            os.flush();

            // Handle our response
            if(conn.getResponseCode() == 200){
                br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
                while((output = br.readLine()) != null){
                    loginResponse += output;
                }
                conn.disconnect();
            }
        } catch (Exception ex) {
            System.out.println("Error in loginToJira: " + ex.getMessage());
            loginResponse = "ERROR";
        }
        System.out.println("\nloginResponse:");
        System.out.println(loginResponse);
        return loginResponse;
    }


    /**
     * This method takes the response from a Jira login request and parses out
     * the JSESSIONID which will be saved and used to authenticate future
     * requests.
     *
     * @param input The response (in JSON format) from a Jira login request.
     *
     * @return jSessionID The value of the JSESSIONID assigned to this session
     * by the Jira server.
     */
    public static String parseJSessionID(String input){
        String jSessionID = "";
        try {
            JSONParser parser = new JSONParser();
            Object obj = parser.parse(input);
            JSONObject jsonObject = (JSONObject) obj;
            JSONObject sessionJsonObj = (JSONObject) jsonObject.get("session");
            jSessionID = (String) sessionJsonObj.get("value");
        } catch (Exception ex) {
            System.out.println("Error in parseJSessionID: " + ex.getMessage());
            jSessionID = "ERROR";
        }
        System.out.println("\njSessionID:");
        System.out.println(jSessionID);
        return jSessionID;
    }


    /**
     * This method calls a given Jira API (using a given JSESSIONID to
     * authenticate the request), then returns the resulting response.
     *
     * @param baseURL The protocol, server name, and port number on which Jira
     * is running suffixed with "/jira/" or /jira/rest/"
     * (e.g., http://company.loc:2990/jira/rest/)
     * @param biExportURL The path to the IonaFX Business Intelligence Export
     * add-in's REST API which will be suffixed to the baseURL
     * (e.g., getbusinessintelligenceexport/1.0/message).
     * @param jSessionID The JSESSIONID returned as part of the response to
     * the login request made in the loginToJira method.
     * @param analysisStartDate The first date of a period of time over which
     * you wish to extract issues that were either added or updated.
     * @param analysisEndDate The last date of a period of time over which
     * you wish to extract issues that were either added or updated.
     *
     * @return jsonData The response to this API call returned from the Jira
     * server in JSON format.
     */
    public static String getJsonData(String baseURL, String biExportURL, String jSessionID, String analysisStartDate, String analysisEndDate){
        String jsonData = "";
        try {
            URL url = new URL(baseURL + biExportURL + "?startDate=" + analysisStartDate + "&endDate=" + analysisEndDate);
            //URL url = new URL(baseURL + "api/2/issue/picker" + "?currentJQL=assignee%3Dadmin");
            String cookie = "JSESSIONID=" + jSessionID;
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Cookie", cookie);
            if(conn.getResponseCode() == 200)
            {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String output = "";
                while((output = br.readLine()) != null){
                    jsonData += output;
                }
                conn.disconnect();
            }
        } catch (Exception ex){
            System.out.println("Error in getJsonData: " + ex.getMessage());
            jsonData = "ERROR";
        }

        System.out.println("\njsonData:");
        System.out.println(jsonData);
        return jsonData;
    }


    /**
     * This method takes the response from a Jira API request made to the
     * IonaFX Business Intellience Export add-in's REST API and converts
     * it from a JSON formatted string into CSV formatted string.
     *
     * @param jsonData The response (in JSON format) from the JIRA API request
     * made to the IonaFX Business Intellience Export add-in's REST API.
     *
     * @return csvData The same data contained in the input data, but converted
     * into CSV format.
     */
    public static String formatAsCSV(String jsonData){
        String csvData = "";
        try {
            JSONParser parser = new JSONParser();
            JSONArray records = null;
            String headerRow = "";
            String dataRows = "";

            String[] arrColNames = {"recordType","project","projectId","projectName","projectLeadUser","issueKey","issueId","issueCreated","issueUpdated","issueCreatorUserName","issueDueDate","issueRemainingEstimate","issueOriginalEstimate","issuePriority","issueReporter","issueStatus","issueTotalTimeSpent","issueVotes","issueWatches","issueResolution","issueResolutionDate","commentId","commentAuthor","commentAuthorKey","commentCreated","commentUpdated","commentUpdateAuthor","worklogId","worklogAuthor","worklogAuthorKey","worklogCreated","worklogStarted","worklogUpdated","worklogTimeSpent","commentText","worklogText"};
            List<String>colNames = Arrays.asList(arrColNames);

            for(int i=0;i<colNames.size();i++)
            {
                headerRow += colNames.get(i) + ",";
            }
            headerRow = headerRow.replaceAll(",$","\n");

            Object obj = parser.parse(jsonData);
            JSONObject jsonValue = (JSONObject) obj;
            records = (JSONArray) jsonValue.get("records");
            Iterator iterRecords = records.iterator();

            while(iterRecords.hasNext())
            {
                JSONObject thisRecord = (JSONObject) iterRecords.next();
                String strRecord = "";
                for(int i=0;i<colNames.size();i++)
                {
                    String thisColName = colNames.get(i);
                    strRecord += "\"" + (String) thisRecord.get(thisColName) + "\",";
                }
                strRecord = strRecord.replaceAll(",$", "\n");
                dataRows += strRecord;
            }

            csvData = headerRow + dataRows;

        } catch (Exception ex) {
            System.out.println("Error in formatAsCSV: " + ex.getMessage());
            csvData = "ERROR";
        }
        System.out.println("\ncsvData:");
        System.out.println(csvData);
        return csvData;
    }


    /**
     * This method takes a CSV-formatted string and writes it out as a file
     * in a given directory.
     *
     * @param csvData A string in CSV format containing data which we wish to
     * write into a file.
     * @param exportDirectory The path to a directory into which we wish to
     * write our finished CSV-formatted file.
     *
     * @return writeToFileOutput An indicator of the success or failure of the
     * operation.
     */
    public static String writeToFile(String csvData, String exportDirectory){
        String writeToFileOutput = "";
        try {
            String currentTimeStamp = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new java.util.Date());
            BufferedWriter writer = new BufferedWriter(new FileWriter(exportDirectory + "JiraIssues_" + currentTimeStamp + ".csv"));
            writer.write(csvData);
            writer.close();

        } catch (Exception ex) {
            System.out.println("Error in writeToFile: " + ex.getMessage());
            writeToFileOutput = "ERROR";
        }
        System.out.println("\nwriteToFileOutput:");
        System.out.println(writeToFileOutput);
        return writeToFileOutput;
    }
}
